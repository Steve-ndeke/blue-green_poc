pipeline {
    agent any
    environment {
        GITHUB_TOKEN = credentials('PAT-jenkins')
        K8S_NAMESPACE = 'blue-green'
        HELM_RELEASE_NAME = 'blue-green-deployment'
        CHART_PATH = './blue-green-deployment/'
        HELM_VERSION = 'v3.15.4'
        HELM_INSTALL_DIR = "${env.WORKSPACE}/helm"
        PATH = "${HELM_INSTALL_DIR}:${env.PATH}" 
        KUBECTL_INSTALL_DIR = "$HOME/bin"
    }
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', credentialsId: 'PAT-jenkins', url: 'https://github.com/Steve-ndeke/blue-green_poc'
            }
        }

        stage('Check and Install kubectl') {
            steps {
                script {
                    def kubectlExists = sh(script: 'which kubectl', returnStatus: true) == 0

                    if (kubectlExists) {
                        echo "kubectl is already installed."
                    } else {
                        echo "kubectl not found. Installing..."
                        sh """
                        mkdir -p ${KUBECTL_INSTALL_DIR}
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        mv kubectl ${KUBECTL_INSTALL_DIR}/kubectl
                        export PATH=${KUBECTL_INSTALL_DIR}:\$PATH
                        """
                        echo "kubectl installed successfully."
                    }
                }
            }
        }

        stage('Test Kubernetes Access') {
            steps {
                withCredentials([file(credentialsId: 'kubernetes_config', variable: 'KUBECONFIG')]) {
                    sh 'kubectl get nodes'
                }
            }
        }

        stage('Install Helm') {
            steps {
                script {
                    // Check if Helm is installed
                    def helmExists = sh(script: 'which helm', returnStatus: true) == 0

                    if (helmExists) {
                        echo "Helm is already installed."
                    } else {
                        echo "Helm is not installed. Installing Helm..."
                        sh """
                        mkdir -p ${HELM_INSTALL_DIR}
                        curl -L https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz -o helm.tar.gz
                        tar -xvzf helm.tar.gz --strip-components=1 -C ${HELM_INSTALL_DIR} linux-amd64/helm
                        rm helm.tar.gz
                        """
                    }
                }
            }
        }

        stage('Helm Upgrade or Install') {
            steps {
                script {
                    helmUpgradeOrInstall()
                }
            }
        }
    }
}

// Function definition outside the pipeline block
def helmUpgradeOrInstall() {
    def deploymentExists = sh(script: "helm list -n ${env.K8S_NAMESPACE} | grep ${env.HELM_RELEASE_NAME}", returnStatus: true) == 0

    if (deploymentExists) {
        echo "Deployment exists. Upgrading..."
        sh "helm upgrade ${env.HELM_RELEASE_NAME} ${env.CHART_PATH} -n ${env.K8S_NAMESPACE}"
    } else {
        echo "Deployment does not exist. Installing..."
        sh "helm install ${env.HELM_RELEASE_NAME} ${env.CHART_PATH} -n ${env.K8S_NAMESPACE} --create-namespace"
    }
}
